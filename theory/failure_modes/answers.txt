1. Race conditions are when multiple threads try to access the same memory without syncronization. This causes underterminate behavior because we don't know the order in which the threads will run. Two signs that code might have race conditions are that it writes to memory without locking or it reads multiple times from memory without locking. Strangled scaling is when locking is done in such a way that it creates unneeded bottlenecking. This can be detected if non-critical code is in a locked part of the thread. Deadlocking is when no thread can continue because no thread can set all the locks it needs to in order to continue. This can be prevented by allways setting locks in the same order. If locks aren't set in the same order there is the possibility of deadlocking. 

2. Load imbalance is when two or more tasks in parallel take a different amount of time to execute. When we were modeling performance we assumed that the amount of time for each task was the same so load imbalance makes modeling performance more complicated because now we need to account for different tasks taking different amounts of time.
